//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CustomerDto: APIModel {

    public enum Status: String, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"

        public static let cases: [Status] = [
          .active,
          .inactive,
        ]
    }

    public var cardPaymentEnabled: Bool?

    public var clabe: String?

    public var curp: String?

    public var email: String?

    public var id: Int?

    public var lastname1: String?

    public var lastname2: String?

    public var lineOfBusiness: String?

    public var lineOfBusinessId: Int?

    public var name: String?

    public var numExt: String?

    public var numInt: String?

    public var paymentServicesEnabled: Bool?

    public var phone: String?

    public var postalCode: String?

    public var redId: String?

    public var rfc: String?

    public var state: String?

    public var stateId: Int?

    public var status: Status?

    public var statusLabel: String?

    public var street: String?

    public var taeEnabled: Bool?

    public var town: String?

    public var townId: Int?

    public init(cardPaymentEnabled: Bool? = nil, clabe: String? = nil, curp: String? = nil, email: String? = nil, id: Int? = nil, lastname1: String? = nil, lastname2: String? = nil, lineOfBusiness: String? = nil, lineOfBusinessId: Int? = nil, name: String? = nil, numExt: String? = nil, numInt: String? = nil, paymentServicesEnabled: Bool? = nil, phone: String? = nil, postalCode: String? = nil, redId: String? = nil, rfc: String? = nil, state: String? = nil, stateId: Int? = nil, status: Status? = nil, statusLabel: String? = nil, street: String? = nil, taeEnabled: Bool? = nil, town: String? = nil, townId: Int? = nil) {
        self.cardPaymentEnabled = cardPaymentEnabled
        self.clabe = clabe
        self.curp = curp
        self.email = email
        self.id = id
        self.lastname1 = lastname1
        self.lastname2 = lastname2
        self.lineOfBusiness = lineOfBusiness
        self.lineOfBusinessId = lineOfBusinessId
        self.name = name
        self.numExt = numExt
        self.numInt = numInt
        self.paymentServicesEnabled = paymentServicesEnabled
        self.phone = phone
        self.postalCode = postalCode
        self.redId = redId
        self.rfc = rfc
        self.state = state
        self.stateId = stateId
        self.status = status
        self.statusLabel = statusLabel
        self.street = street
        self.taeEnabled = taeEnabled
        self.town = town
        self.townId = townId
    }

    private enum CodingKeys: String, CodingKey {
        case cardPaymentEnabled
        case clabe
        case curp
        case email
        case id
        case lastname1
        case lastname2
        case lineOfBusiness
        case lineOfBusinessId
        case name
        case numExt
        case numInt
        case paymentServicesEnabled
        case phone
        case postalCode
        case redId
        case rfc
        case state
        case stateId
        case status
        case statusLabel
        case street
        case taeEnabled
        case town
        case townId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        cardPaymentEnabled = try container.decodeIfPresent(.cardPaymentEnabled)
        clabe = try container.decodeIfPresent(.clabe)
        curp = try container.decodeIfPresent(.curp)
        email = try container.decodeIfPresent(.email)
        id = try container.decodeIfPresent(.id)
        lastname1 = try container.decodeIfPresent(.lastname1)
        lastname2 = try container.decodeIfPresent(.lastname2)
        lineOfBusiness = try container.decodeIfPresent(.lineOfBusiness)
        lineOfBusinessId = try container.decodeIfPresent(.lineOfBusinessId)
        name = try container.decodeIfPresent(.name)
        numExt = try container.decodeIfPresent(.numExt)
        numInt = try container.decodeIfPresent(.numInt)
        paymentServicesEnabled = try container.decodeIfPresent(.paymentServicesEnabled)
        phone = try container.decodeIfPresent(.phone)
        postalCode = try container.decodeIfPresent(.postalCode)
        redId = try container.decodeIfPresent(.redId)
        rfc = try container.decodeIfPresent(.rfc)
        state = try container.decodeIfPresent(.state)
        stateId = try container.decodeIfPresent(.stateId)
        status = try container.decodeIfPresent(.status)
        statusLabel = try container.decodeIfPresent(.statusLabel)
        street = try container.decodeIfPresent(.street)
        taeEnabled = try container.decodeIfPresent(.taeEnabled)
        town = try container.decodeIfPresent(.town)
        townId = try container.decodeIfPresent(.townId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(cardPaymentEnabled, forKey: .cardPaymentEnabled)
        try container.encodeIfPresent(clabe, forKey: .clabe)
        try container.encodeIfPresent(curp, forKey: .curp)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(lastname1, forKey: .lastname1)
        try container.encodeIfPresent(lastname2, forKey: .lastname2)
        try container.encodeIfPresent(lineOfBusiness, forKey: .lineOfBusiness)
        try container.encodeIfPresent(lineOfBusinessId, forKey: .lineOfBusinessId)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(numExt, forKey: .numExt)
        try container.encodeIfPresent(numInt, forKey: .numInt)
        try container.encodeIfPresent(paymentServicesEnabled, forKey: .paymentServicesEnabled)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(postalCode, forKey: .postalCode)
        try container.encodeIfPresent(redId, forKey: .redId)
        try container.encodeIfPresent(rfc, forKey: .rfc)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(stateId, forKey: .stateId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(statusLabel, forKey: .statusLabel)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(taeEnabled, forKey: .taeEnabled)
        try container.encodeIfPresent(town, forKey: .town)
        try container.encodeIfPresent(townId, forKey: .townId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CustomerDto else { return false }
      guard self.cardPaymentEnabled == object.cardPaymentEnabled else { return false }
      guard self.clabe == object.clabe else { return false }
      guard self.curp == object.curp else { return false }
      guard self.email == object.email else { return false }
      guard self.id == object.id else { return false }
      guard self.lastname1 == object.lastname1 else { return false }
      guard self.lastname2 == object.lastname2 else { return false }
      guard self.lineOfBusiness == object.lineOfBusiness else { return false }
      guard self.lineOfBusinessId == object.lineOfBusinessId else { return false }
      guard self.name == object.name else { return false }
      guard self.numExt == object.numExt else { return false }
      guard self.numInt == object.numInt else { return false }
      guard self.paymentServicesEnabled == object.paymentServicesEnabled else { return false }
      guard self.phone == object.phone else { return false }
      guard self.postalCode == object.postalCode else { return false }
      guard self.redId == object.redId else { return false }
      guard self.rfc == object.rfc else { return false }
      guard self.state == object.state else { return false }
      guard self.stateId == object.stateId else { return false }
      guard self.status == object.status else { return false }
      guard self.statusLabel == object.statusLabel else { return false }
      guard self.street == object.street else { return false }
      guard self.taeEnabled == object.taeEnabled else { return false }
      guard self.town == object.town else { return false }
      guard self.townId == object.townId else { return false }
      return true
    }

    public static func == (lhs: CustomerDto, rhs: CustomerDto) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
