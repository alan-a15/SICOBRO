//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class CustomerTaeOperation: APIModel {

    public enum OperationType: String, Codable {
        case sale = "SALE"
        case balanceUp = "BALANCE_UP"
        case balanceDown = "BALANCE_DOWN"
        case balanceTransfer = "BALANCE_TRANSFER"

        public static let cases: [OperationType] = [
          .sale,
          .balanceUp,
          .balanceDown,
          .balanceTransfer,
        ]
    }

    public enum TxnStatus: String, Codable {
        case created = "CREATED"
        case denied = "DENIED"
        case approved = "APPROVED"

        public static let cases: [TxnStatus] = [
          .created,
          .denied,
          .approved,
        ]
    }

    public var account: String?

    public var amount: Int?

    public var approvalCode: String?

    public var authorizerRC: String?

    public var authorizerRM: String?

    public var createdAt: DateTime?

    public var customerId: Int?

    public var customerName: String?

    public var deepestResponseCode: String?

    public var deepestResponseMessage: String?

    public var id: String?

    public var operationType: OperationType?

    public var operationTypeLabel: String?

    public var productName: String?

    public var productTxnId: String?

    public var redId: String?

    public var region: String?

    public var responseCode: String?

    public var responseMessage: String?

    public var retrievalId: String?

    public var storeId: Int?

    public var storeName: String?

    public var storePin: String?

    public var txnDateId: Int?

    public var txnStatus: TxnStatus?

    public var txnStatusLabel: String?

    public init(account: String? = nil, amount: Int? = nil, approvalCode: String? = nil, authorizerRC: String? = nil, authorizerRM: String? = nil, createdAt: DateTime? = nil, customerId: Int? = nil, customerName: String? = nil, deepestResponseCode: String? = nil, deepestResponseMessage: String? = nil, id: String? = nil, operationType: OperationType? = nil, operationTypeLabel: String? = nil, productName: String? = nil, productTxnId: String? = nil, redId: String? = nil, region: String? = nil, responseCode: String? = nil, responseMessage: String? = nil, retrievalId: String? = nil, storeId: Int? = nil, storeName: String? = nil, storePin: String? = nil, txnDateId: Int? = nil, txnStatus: TxnStatus? = nil, txnStatusLabel: String? = nil) {
        self.account = account
        self.amount = amount
        self.approvalCode = approvalCode
        self.authorizerRC = authorizerRC
        self.authorizerRM = authorizerRM
        self.createdAt = createdAt
        self.customerId = customerId
        self.customerName = customerName
        self.deepestResponseCode = deepestResponseCode
        self.deepestResponseMessage = deepestResponseMessage
        self.id = id
        self.operationType = operationType
        self.operationTypeLabel = operationTypeLabel
        self.productName = productName
        self.productTxnId = productTxnId
        self.redId = redId
        self.region = region
        self.responseCode = responseCode
        self.responseMessage = responseMessage
        self.retrievalId = retrievalId
        self.storeId = storeId
        self.storeName = storeName
        self.storePin = storePin
        self.txnDateId = txnDateId
        self.txnStatus = txnStatus
        self.txnStatusLabel = txnStatusLabel
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case amount
        case approvalCode
        case authorizerRC
        case authorizerRM
        case createdAt
        case customerId
        case customerName
        case deepestResponseCode
        case deepestResponseMessage
        case id
        case operationType
        case operationTypeLabel
        case productName
        case productTxnId
        case redId
        case region
        case responseCode
        case responseMessage
        case retrievalId
        case storeId
        case storeName
        case storePin
        case txnDateId
        case txnStatus
        case txnStatusLabel
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        account = try container.decodeIfPresent(.account)
        amount = try container.decodeIfPresent(.amount)
        approvalCode = try container.decodeIfPresent(.approvalCode)
        authorizerRC = try container.decodeIfPresent(.authorizerRC)
        authorizerRM = try container.decodeIfPresent(.authorizerRM)
        createdAt = try container.decodeIfPresent(.createdAt)
        customerId = try container.decodeIfPresent(.customerId)
        customerName = try container.decodeIfPresent(.customerName)
        deepestResponseCode = try container.decodeIfPresent(.deepestResponseCode)
        deepestResponseMessage = try container.decodeIfPresent(.deepestResponseMessage)
        id = try container.decodeIfPresent(.id)
        operationType = try container.decodeIfPresent(.operationType)
        operationTypeLabel = try container.decodeIfPresent(.operationTypeLabel)
        productName = try container.decodeIfPresent(.productName)
        productTxnId = try container.decodeIfPresent(.productTxnId)
        redId = try container.decodeIfPresent(.redId)
        region = try container.decodeIfPresent(.region)
        responseCode = try container.decodeIfPresent(.responseCode)
        responseMessage = try container.decodeIfPresent(.responseMessage)
        retrievalId = try container.decodeIfPresent(.retrievalId)
        storeId = try container.decodeIfPresent(.storeId)
        storeName = try container.decodeIfPresent(.storeName)
        storePin = try container.decodeIfPresent(.storePin)
        txnDateId = try container.decodeIfPresent(.txnDateId)
        txnStatus = try container.decodeIfPresent(.txnStatus)
        txnStatusLabel = try container.decodeIfPresent(.txnStatusLabel)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(approvalCode, forKey: .approvalCode)
        try container.encodeIfPresent(authorizerRC, forKey: .authorizerRC)
        try container.encodeIfPresent(authorizerRM, forKey: .authorizerRM)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(customerName, forKey: .customerName)
        try container.encodeIfPresent(deepestResponseCode, forKey: .deepestResponseCode)
        try container.encodeIfPresent(deepestResponseMessage, forKey: .deepestResponseMessage)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(operationType, forKey: .operationType)
        try container.encodeIfPresent(operationTypeLabel, forKey: .operationTypeLabel)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(productTxnId, forKey: .productTxnId)
        try container.encodeIfPresent(redId, forKey: .redId)
        try container.encodeIfPresent(region, forKey: .region)
        try container.encodeIfPresent(responseCode, forKey: .responseCode)
        try container.encodeIfPresent(responseMessage, forKey: .responseMessage)
        try container.encodeIfPresent(retrievalId, forKey: .retrievalId)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(storeName, forKey: .storeName)
        try container.encodeIfPresent(storePin, forKey: .storePin)
        try container.encodeIfPresent(txnDateId, forKey: .txnDateId)
        try container.encodeIfPresent(txnStatus, forKey: .txnStatus)
        try container.encodeIfPresent(txnStatusLabel, forKey: .txnStatusLabel)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? CustomerTaeOperation else { return false }
      guard self.account == object.account else { return false }
      guard self.amount == object.amount else { return false }
      guard self.approvalCode == object.approvalCode else { return false }
      guard self.authorizerRC == object.authorizerRC else { return false }
      guard self.authorizerRM == object.authorizerRM else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.customerId == object.customerId else { return false }
      guard self.customerName == object.customerName else { return false }
      guard self.deepestResponseCode == object.deepestResponseCode else { return false }
      guard self.deepestResponseMessage == object.deepestResponseMessage else { return false }
      guard self.id == object.id else { return false }
      guard self.operationType == object.operationType else { return false }
      guard self.operationTypeLabel == object.operationTypeLabel else { return false }
      guard self.productName == object.productName else { return false }
      guard self.productTxnId == object.productTxnId else { return false }
      guard self.redId == object.redId else { return false }
      guard self.region == object.region else { return false }
      guard self.responseCode == object.responseCode else { return false }
      guard self.responseMessage == object.responseMessage else { return false }
      guard self.retrievalId == object.retrievalId else { return false }
      guard self.storeId == object.storeId else { return false }
      guard self.storeName == object.storeName else { return false }
      guard self.storePin == object.storePin else { return false }
      guard self.txnDateId == object.txnDateId else { return false }
      guard self.txnStatus == object.txnStatus else { return false }
      guard self.txnStatusLabel == object.txnStatusLabel else { return false }
      return true
    }

    public static func == (lhs: CustomerTaeOperation, rhs: CustomerTaeOperation) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
