//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class EnabledModules: APIModel {

    public var cardPaymentEnabled: Bool?

    public var paymentServicesEnabled: Bool?

    public var taeEnabled: Bool?

    public init(cardPaymentEnabled: Bool? = nil, paymentServicesEnabled: Bool? = nil, taeEnabled: Bool? = nil) {
        self.cardPaymentEnabled = cardPaymentEnabled
        self.paymentServicesEnabled = paymentServicesEnabled
        self.taeEnabled = taeEnabled
    }

    private enum CodingKeys: String, CodingKey {
        case cardPaymentEnabled
        case paymentServicesEnabled
        case taeEnabled
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        cardPaymentEnabled = try container.decodeIfPresent(.cardPaymentEnabled)
        paymentServicesEnabled = try container.decodeIfPresent(.paymentServicesEnabled)
        taeEnabled = try container.decodeIfPresent(.taeEnabled)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(cardPaymentEnabled, forKey: .cardPaymentEnabled)
        try container.encodeIfPresent(paymentServicesEnabled, forKey: .paymentServicesEnabled)
        try container.encodeIfPresent(taeEnabled, forKey: .taeEnabled)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? EnabledModules else { return false }
      guard self.cardPaymentEnabled == object.cardPaymentEnabled else { return false }
      guard self.paymentServicesEnabled == object.paymentServicesEnabled else { return false }
      guard self.taeEnabled == object.taeEnabled else { return false }
      return true
    }

    public static func == (lhs: EnabledModules, rhs: EnabledModules) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
