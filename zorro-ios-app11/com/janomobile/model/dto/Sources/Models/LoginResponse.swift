//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class LoginResponse: APIModel {

    public enum ActionRequired: String, Codable {
        case none = "NONE"
        case changePassword = "CHANGE_PASSWORD"
        case usePasswordEmailed = "USE_PASSWORD_EMAILED"

        public static let cases: [ActionRequired] = [
          .none,
          .changePassword,
          .usePasswordEmailed,
        ]
    }

    public enum LoginActionRequired: String, Codable {
        case none = "NONE"
        case changePassword = "CHANGE_PASSWORD"
        case usePasswordEmailed = "USE_PASSWORD_EMAILED"

        public static let cases: [LoginActionRequired] = [
          .none,
          .changePassword,
          .usePasswordEmailed,
        ]
    }

    public var actionRequired: ActionRequired?

    public var billpocketDeviceToken: String?

    public var billpocketModuleEnabled: Bool?

    public var billpocketToken: String?

    public var loginActionRequired: LoginActionRequired?

    public var maskedEmail: String?

    public var servicePaymentModuleEnabled: Bool?

    public var sessionToken: String?

    public var storeId: String?

    public var storeName: String?

    public var taeModuleEnabled: Bool?

    public var user: String?

    public init(actionRequired: ActionRequired? = nil, billpocketDeviceToken: String? = nil, billpocketModuleEnabled: Bool? = nil, billpocketToken: String? = nil, loginActionRequired: LoginActionRequired? = nil, maskedEmail: String? = nil, servicePaymentModuleEnabled: Bool? = nil, sessionToken: String? = nil, storeId: String? = nil, storeName: String? = nil, taeModuleEnabled: Bool? = nil, user: String? = nil) {
        self.actionRequired = actionRequired
        self.billpocketDeviceToken = billpocketDeviceToken
        self.billpocketModuleEnabled = billpocketModuleEnabled
        self.billpocketToken = billpocketToken
        self.loginActionRequired = loginActionRequired
        self.maskedEmail = maskedEmail
        self.servicePaymentModuleEnabled = servicePaymentModuleEnabled
        self.sessionToken = sessionToken
        self.storeId = storeId
        self.storeName = storeName
        self.taeModuleEnabled = taeModuleEnabled
        self.user = user
    }

    private enum CodingKeys: String, CodingKey {
        case actionRequired
        case billpocketDeviceToken
        case billpocketModuleEnabled
        case billpocketToken
        case loginActionRequired
        case maskedEmail
        case servicePaymentModuleEnabled
        case sessionToken
        case storeId
        case storeName
        case taeModuleEnabled
        case user
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        actionRequired = try container.decodeIfPresent(.actionRequired)
        billpocketDeviceToken = try container.decodeIfPresent(.billpocketDeviceToken)
        billpocketModuleEnabled = try container.decodeIfPresent(.billpocketModuleEnabled)
        billpocketToken = try container.decodeIfPresent(.billpocketToken)
        loginActionRequired = try container.decodeIfPresent(.loginActionRequired)
        maskedEmail = try container.decodeIfPresent(.maskedEmail)
        servicePaymentModuleEnabled = try container.decodeIfPresent(.servicePaymentModuleEnabled)
        sessionToken = try container.decodeIfPresent(.sessionToken)
        storeId = try container.decodeIfPresent(.storeId)
        storeName = try container.decodeIfPresent(.storeName)
        taeModuleEnabled = try container.decodeIfPresent(.taeModuleEnabled)
        user = try container.decodeIfPresent(.user)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(actionRequired, forKey: .actionRequired)
        try container.encodeIfPresent(billpocketDeviceToken, forKey: .billpocketDeviceToken)
        try container.encodeIfPresent(billpocketModuleEnabled, forKey: .billpocketModuleEnabled)
        try container.encodeIfPresent(billpocketToken, forKey: .billpocketToken)
        try container.encodeIfPresent(loginActionRequired, forKey: .loginActionRequired)
        try container.encodeIfPresent(maskedEmail, forKey: .maskedEmail)
        try container.encodeIfPresent(servicePaymentModuleEnabled, forKey: .servicePaymentModuleEnabled)
        try container.encodeIfPresent(sessionToken, forKey: .sessionToken)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(storeName, forKey: .storeName)
        try container.encodeIfPresent(taeModuleEnabled, forKey: .taeModuleEnabled)
        try container.encodeIfPresent(user, forKey: .user)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? LoginResponse else { return false }
      guard self.actionRequired == object.actionRequired else { return false }
      guard self.billpocketDeviceToken == object.billpocketDeviceToken else { return false }
      guard self.billpocketModuleEnabled == object.billpocketModuleEnabled else { return false }
      guard self.billpocketToken == object.billpocketToken else { return false }
      guard self.loginActionRequired == object.loginActionRequired else { return false }
      guard self.maskedEmail == object.maskedEmail else { return false }
      guard self.servicePaymentModuleEnabled == object.servicePaymentModuleEnabled else { return false }
      guard self.sessionToken == object.sessionToken else { return false }
      guard self.storeId == object.storeId else { return false }
      guard self.storeName == object.storeName else { return false }
      guard self.taeModuleEnabled == object.taeModuleEnabled else { return false }
      guard self.user == object.user else { return false }
      return true
    }

    public static func == (lhs: LoginResponse, rhs: LoginResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
