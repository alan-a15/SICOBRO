//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PageOfReportBillpocketTxn: APIModel {

    public var content: [ReportBillpocketTxn]?

    public var empty: Bool?

    public var first: Bool?

    public var last: Bool?

    public var number: Int?

    public var numberOfElements: Int?

    public var pageable: Pageable?

    public var size: Int?

    public var sort: Sort?

    public var totalElements: Int?

    public var totalPages: Int?

    public init(content: [ReportBillpocketTxn]? = nil, empty: Bool? = nil, first: Bool? = nil, last: Bool? = nil, number: Int? = nil, numberOfElements: Int? = nil, pageable: Pageable? = nil, size: Int? = nil, sort: Sort? = nil, totalElements: Int? = nil, totalPages: Int? = nil) {
        self.content = content
        self.empty = empty
        self.first = first
        self.last = last
        self.number = number
        self.numberOfElements = numberOfElements
        self.pageable = pageable
        self.size = size
        self.sort = sort
        self.totalElements = totalElements
        self.totalPages = totalPages
    }

    private enum CodingKeys: String, CodingKey {
        case content
        case empty
        case first
        case last
        case number
        case numberOfElements
        case pageable
        case size
        case sort
        case totalElements
        case totalPages
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        content = try container.decodeArrayIfPresent(.content)
        empty = try container.decodeIfPresent(.empty)
        first = try container.decodeIfPresent(.first)
        last = try container.decodeIfPresent(.last)
        number = try container.decodeIfPresent(.number)
        numberOfElements = try container.decodeIfPresent(.numberOfElements)
        pageable = try container.decodeIfPresent(.pageable)
        size = try container.decodeIfPresent(.size)
        sort = try container.decodeIfPresent(.sort)
        totalElements = try container.decodeIfPresent(.totalElements)
        totalPages = try container.decodeIfPresent(.totalPages)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(content, forKey: .content)
        try container.encodeIfPresent(empty, forKey: .empty)
        try container.encodeIfPresent(first, forKey: .first)
        try container.encodeIfPresent(last, forKey: .last)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(numberOfElements, forKey: .numberOfElements)
        try container.encodeIfPresent(pageable, forKey: .pageable)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(sort, forKey: .sort)
        try container.encodeIfPresent(totalElements, forKey: .totalElements)
        try container.encodeIfPresent(totalPages, forKey: .totalPages)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PageOfReportBillpocketTxn else { return false }
      guard self.content == object.content else { return false }
      guard self.empty == object.empty else { return false }
      guard self.first == object.first else { return false }
      guard self.last == object.last else { return false }
      guard self.number == object.number else { return false }
      guard self.numberOfElements == object.numberOfElements else { return false }
      guard self.pageable == object.pageable else { return false }
      guard self.size == object.size else { return false }
      guard self.sort == object.sort else { return false }
      guard self.totalElements == object.totalElements else { return false }
      guard self.totalPages == object.totalPages else { return false }
      return true
    }

    public static func == (lhs: PageOfReportBillpocketTxn, rhs: PageOfReportBillpocketTxn) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
