//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Pageable: APIModel {

    public var offset: Int?

    public var pageNumber: Int?

    public var pageSize: Int?

    public var paged: Bool?

    public var sort: Sort?

    public var unpaged: Bool?

    public init(offset: Int? = nil, pageNumber: Int? = nil, pageSize: Int? = nil, paged: Bool? = nil, sort: Sort? = nil, unpaged: Bool? = nil) {
        self.offset = offset
        self.pageNumber = pageNumber
        self.pageSize = pageSize
        self.paged = paged
        self.sort = sort
        self.unpaged = unpaged
    }

    private enum CodingKeys: String, CodingKey {
        case offset
        case pageNumber
        case pageSize
        case paged
        case sort
        case unpaged
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        offset = try container.decodeIfPresent(.offset)
        pageNumber = try container.decodeIfPresent(.pageNumber)
        pageSize = try container.decodeIfPresent(.pageSize)
        paged = try container.decodeIfPresent(.paged)
        sort = try container.decodeIfPresent(.sort)
        unpaged = try container.decodeIfPresent(.unpaged)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(offset, forKey: .offset)
        try container.encodeIfPresent(pageNumber, forKey: .pageNumber)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(paged, forKey: .paged)
        try container.encodeIfPresent(sort, forKey: .sort)
        try container.encodeIfPresent(unpaged, forKey: .unpaged)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Pageable else { return false }
      guard self.offset == object.offset else { return false }
      guard self.pageNumber == object.pageNumber else { return false }
      guard self.pageSize == object.pageSize else { return false }
      guard self.paged == object.paged else { return false }
      guard self.sort == object.sort else { return false }
      guard self.unpaged == object.unpaged else { return false }
      return true
    }

    public static func == (lhs: Pageable, rhs: Pageable) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
