//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class Resource: APIModel {

    public var description: String?

    public var file: File?

    public var filename: String?

    public var inputStream: InputStream?

    public var `open`: Bool?

    public var readable: Bool?

    public var uri: URI?

    public var url: URL?

    public init(description: String? = nil, file: File? = nil, filename: String? = nil, inputStream: InputStream? = nil, `open`: Bool? = nil, readable: Bool? = nil, uri: URI? = nil, url: URL? = nil) {
        self.description = description
        self.file = file
        self.filename = filename
        self.inputStream = inputStream
        self.`open` = `open`
        self.readable = readable
        self.uri = uri
        self.url = url
    }

    private enum CodingKeys: String, CodingKey {
        case description
        case file
        case filename
        case inputStream
        case `open` = "open"
        case readable
        case uri
        case url
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        description = try container.decodeIfPresent(.description)
        file = try container.decodeIfPresent(.file)
        filename = try container.decodeIfPresent(.filename)
        inputStream = try container.decodeIfPresent(.inputStream)
        `open` = try container.decodeIfPresent(.`open`)
        readable = try container.decodeIfPresent(.readable)
        uri = try container.decodeIfPresent(.uri)
        url = try container.decodeIfPresent(.url)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(file, forKey: .file)
        try container.encodeIfPresent(filename, forKey: .filename)
        try container.encodeIfPresent(inputStream, forKey: .inputStream)
        try container.encodeIfPresent(`open`, forKey: .`open`)
        try container.encodeIfPresent(readable, forKey: .readable)
        try container.encodeIfPresent(uri, forKey: .uri)
        try container.encodeIfPresent(url, forKey: .url)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? Resource else { return false }
      guard self.description == object.description else { return false }
      guard self.file == object.file else { return false }
      guard self.filename == object.filename else { return false }
      guard self.inputStream == object.inputStream else { return false }
      guard self.`open` == object.`open` else { return false }
      guard self.readable == object.readable else { return false }
      guard self.uri == object.uri else { return false }
      guard self.url == object.url else { return false }
      return true
    }

    public static func == (lhs: Resource, rhs: Resource) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
