//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TaeSaleResponse: APIModel {

    public var approvalCode: String?

    public var janoRetrievalId: String?

    public var phone: String?

    public var productName: String?

    public var taeBalanceCents: Int?

    public var taeBalanceLabel: String?

    public init(approvalCode: String? = nil, janoRetrievalId: String? = nil, phone: String? = nil, productName: String? = nil, taeBalanceCents: Int? = nil, taeBalanceLabel: String? = nil) {
        self.approvalCode = approvalCode
        self.janoRetrievalId = janoRetrievalId
        self.phone = phone
        self.productName = productName
        self.taeBalanceCents = taeBalanceCents
        self.taeBalanceLabel = taeBalanceLabel
    }

    private enum CodingKeys: String, CodingKey {
        case approvalCode
        case janoRetrievalId
        case phone
        case productName
        case taeBalanceCents
        case taeBalanceLabel
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        approvalCode = try container.decodeIfPresent(.approvalCode)
        janoRetrievalId = try container.decodeIfPresent(.janoRetrievalId)
        phone = try container.decodeIfPresent(.phone)
        productName = try container.decodeIfPresent(.productName)
        taeBalanceCents = try container.decodeIfPresent(.taeBalanceCents)
        taeBalanceLabel = try container.decodeIfPresent(.taeBalanceLabel)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(approvalCode, forKey: .approvalCode)
        try container.encodeIfPresent(janoRetrievalId, forKey: .janoRetrievalId)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(taeBalanceCents, forKey: .taeBalanceCents)
        try container.encodeIfPresent(taeBalanceLabel, forKey: .taeBalanceLabel)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TaeSaleResponse else { return false }
      guard self.approvalCode == object.approvalCode else { return false }
      guard self.janoRetrievalId == object.janoRetrievalId else { return false }
      guard self.phone == object.phone else { return false }
      guard self.productName == object.productName else { return false }
      guard self.taeBalanceCents == object.taeBalanceCents else { return false }
      guard self.taeBalanceLabel == object.taeBalanceLabel else { return false }
      return true
    }

    public static func == (lhs: TaeSaleResponse, rhs: TaeSaleResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
