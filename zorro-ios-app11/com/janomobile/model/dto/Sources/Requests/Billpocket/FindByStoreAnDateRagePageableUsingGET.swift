//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

extension JanoAPI.Billpocket {

    /**
    Consultar las transacciones entre un periodo de tiempo por p√°ginas, formato: ddMMyyyy
    */
    public enum FindByStoreAnDateRagePageableUsingGET {

        public static let service = APIService<Response>(id: "findByStoreAnDateRagePageableUsingGET", tag: "Billpocket", method: "GET", path: "/api/sales/billpocket/transactionsByDatePageable/{startDateString}/{endDateString}", hasBody: false)

        /** direction */
        public enum Direction: String, Codable {
            case asc = "ASC"
            case desc = "DESC"

            public static let cases: [Direction] = [
              .asc,
              .desc,
            ]
        }

        public final class Request: APIRequest<Response> {

            public struct Options {

                /** App Version */
                public var appversion: String?

                /** Device ID */
                public var deviceid: String?

                /** direction */
                public var direction: Direction?

                /** endDateString */
                public var endDateString: String

                /** page */
                public var page: Int

                /** pageSize */
                public var pageSize: Int

                /** Session Token */
                public var sessiontoken: String?

                /** startDateString */
                public var startDateString: String

                /** status */
                public var status: String?

                public init(appversion: String? = nil, deviceid: String? = nil, direction: Direction? = nil, endDateString: String, page: Int, pageSize: Int, sessiontoken: String? = nil, startDateString: String, status: String? = nil) {
                    self.appversion = appversion
                    self.deviceid = deviceid
                    self.direction = direction
                    self.endDateString = endDateString
                    self.page = page
                    self.pageSize = pageSize
                    self.sessiontoken = sessiontoken
                    self.startDateString = startDateString
                    self.status = status
                }
            }

            public var options: Options

            public init(options: Options) {
                self.options = options
                super.init(service: FindByStoreAnDateRagePageableUsingGET.service)
            }

            /// convenience initialiser so an Option doesn't have to be created
            public convenience init(appversion: String? = nil, deviceid: String? = nil, direction: Direction? = nil, endDateString: String, page: Int, pageSize: Int, sessiontoken: String? = nil, startDateString: String, status: String? = nil) {
                let options = Options(appversion: appversion, deviceid: deviceid, direction: direction, endDateString: endDateString, page: page, pageSize: pageSize, sessiontoken: sessiontoken, startDateString: startDateString, status: status)
                self.init(options: options)
            }

            public override var path: String {
                return super.path.replacingOccurrences(of: "{" + "endDateString" + "}", with: "\(self.options.endDateString)").replacingOccurrences(of: "{" + "startDateString" + "}", with: "\(self.options.startDateString)")
            }

            public override var parameters: [String: Any] {
                var params: [String: Any] = [:]
                if let direction = options.direction?.encode() {
                  params["direction"] = direction
                }
                params["page"] = options.page
                params["pageSize"] = options.pageSize
                if let status = options.status {
                  params["status"] = status
                }
                return params
            }
        }

        public enum Response: APIResponseValue, CustomStringConvertible, CustomDebugStringConvertible {
            public typealias SuccessType = PageOfReportBillpocketTxn

            /** OK */
            case status200(PageOfReportBillpocketTxn)

            /** Unauthorized */
            case status401

            /** Forbidden */
            case status403

            /** Not Found */
            case status404

            public var success: PageOfReportBillpocketTxn? {
                switch self {
                case .status200(let response): return response
                default: return nil
                }
            }

            public var response: Any {
                switch self {
                case .status200(let response): return response
                default: return ()
                }
            }

            public var statusCode: Int {
                switch self {
                case .status200: return 200
                case .status401: return 401
                case .status403: return 403
                case .status404: return 404
                }
            }

            public var successful: Bool {
                switch self {
                case .status200: return true
                case .status401: return false
                case .status403: return false
                case .status404: return false
                }
            }

            public init(statusCode: Int, data: Data, decoder: ResponseDecoder) throws {
                switch statusCode {
                case 200: self = try .status200(decoder.decode(PageOfReportBillpocketTxn.self, from: data))
                case 401: self = .status401
                case 403: self = .status403
                case 404: self = .status404
                default: throw APIClientError.unexpectedStatusCode(statusCode: statusCode, data: data)
                }
            }

            public var description: String {
                return "\(statusCode) \(successful ? "success" : "failure")"
            }

            public var debugDescription: String {
                var string = description
                let responseString = "\(response)"
                if responseString != "()" {
                    string += "\n\(responseString)"
                }
                return string
            }
        }
    }
}
