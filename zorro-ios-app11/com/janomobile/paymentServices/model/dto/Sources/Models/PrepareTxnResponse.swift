//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class PrepareTxnResponse: APIModel {

    public var amount: String?

    public var amountLabel: String?

    public var balanceDecrease: String?

    public var balanceDecreaseLabel: String?

    public var commission: String?

    public var commissionLabel: String?

    public var janoUUID: String?

    public var totalAmount: String?

    public var totalAmountLabel: String?

    public init(amount: String? = nil, amountLabel: String? = nil, balanceDecrease: String? = nil, balanceDecreaseLabel: String? = nil, commission: String? = nil, commissionLabel: String? = nil, janoUUID: String? = nil, totalAmount: String? = nil, totalAmountLabel: String? = nil) {
        self.amount = amount
        self.amountLabel = amountLabel
        self.balanceDecrease = balanceDecrease
        self.balanceDecreaseLabel = balanceDecreaseLabel
        self.commission = commission
        self.commissionLabel = commissionLabel
        self.janoUUID = janoUUID
        self.totalAmount = totalAmount
        self.totalAmountLabel = totalAmountLabel
    }

    private enum CodingKeys: String, CodingKey {
        case amount
        case amountLabel
        case balanceDecrease
        case balanceDecreaseLabel
        case commission
        case commissionLabel
        case janoUUID
        case totalAmount
        case totalAmountLabel
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        amount = try container.decodeIfPresent(.amount)
        amountLabel = try container.decodeIfPresent(.amountLabel)
        balanceDecrease = try container.decodeIfPresent(.balanceDecrease)
        balanceDecreaseLabel = try container.decodeIfPresent(.balanceDecreaseLabel)
        commission = try container.decodeIfPresent(.commission)
        commissionLabel = try container.decodeIfPresent(.commissionLabel)
        janoUUID = try container.decodeIfPresent(.janoUUID)
        totalAmount = try container.decodeIfPresent(.totalAmount)
        totalAmountLabel = try container.decodeIfPresent(.totalAmountLabel)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountLabel, forKey: .amountLabel)
        try container.encodeIfPresent(balanceDecrease, forKey: .balanceDecrease)
        try container.encodeIfPresent(balanceDecreaseLabel, forKey: .balanceDecreaseLabel)
        try container.encodeIfPresent(commission, forKey: .commission)
        try container.encodeIfPresent(commissionLabel, forKey: .commissionLabel)
        try container.encodeIfPresent(janoUUID, forKey: .janoUUID)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
        try container.encodeIfPresent(totalAmountLabel, forKey: .totalAmountLabel)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? PrepareTxnResponse else { return false }
      guard self.amount == object.amount else { return false }
      guard self.amountLabel == object.amountLabel else { return false }
      guard self.balanceDecrease == object.balanceDecrease else { return false }
      guard self.balanceDecreaseLabel == object.balanceDecreaseLabel else { return false }
      guard self.commission == object.commission else { return false }
      guard self.commissionLabel == object.commissionLabel else { return false }
      guard self.janoUUID == object.janoUUID else { return false }
      guard self.totalAmount == object.totalAmount else { return false }
      guard self.totalAmountLabel == object.totalAmountLabel else { return false }
      return true
    }

    public static func == (lhs: PrepareTxnResponse, rhs: PrepareTxnResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
