//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ProductDto: APIModel {

    public enum Status: String, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"

        public static let cases: [Status] = [
          .active,
          .inactive,
        ]
    }

    public var customerCommission: String?

    public var finalCustomerPaysCommission: Bool?

    public var fixedAmounts: String?

    public var fixedAmountsEnabled: Bool?

    public var name: String?

    public var ownerCommission: String?

    public var providerCommission: String?

    public var referenceDescription: String?

    public var referenceImage: String?

    public var referenceSizeDescription: String?

    public var segmentId: Int?

    public var status: Status?

    public var txnId: String?

    public init(customerCommission: String? = nil, finalCustomerPaysCommission: Bool? = nil, fixedAmounts: String? = nil, fixedAmountsEnabled: Bool? = nil, name: String? = nil, ownerCommission: String? = nil, providerCommission: String? = nil, referenceDescription: String? = nil, referenceImage: String? = nil, referenceSizeDescription: String? = nil, segmentId: Int? = nil, status: Status? = nil, txnId: String? = nil) {
        self.customerCommission = customerCommission
        self.finalCustomerPaysCommission = finalCustomerPaysCommission
        self.fixedAmounts = fixedAmounts
        self.fixedAmountsEnabled = fixedAmountsEnabled
        self.name = name
        self.ownerCommission = ownerCommission
        self.providerCommission = providerCommission
        self.referenceDescription = referenceDescription
        self.referenceImage = referenceImage
        self.referenceSizeDescription = referenceSizeDescription
        self.segmentId = segmentId
        self.status = status
        self.txnId = txnId
    }

    private enum CodingKeys: String, CodingKey {
        case customerCommission
        case finalCustomerPaysCommission
        case fixedAmounts
        case fixedAmountsEnabled
        case name
        case ownerCommission
        case providerCommission
        case referenceDescription
        case referenceImage
        case referenceSizeDescription
        case segmentId
        case status
        case txnId
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        customerCommission = try container.decodeIfPresent(.customerCommission)
        finalCustomerPaysCommission = try container.decodeIfPresent(.finalCustomerPaysCommission)
        fixedAmounts = try container.decodeIfPresent(.fixedAmounts)
        fixedAmountsEnabled = try container.decodeIfPresent(.fixedAmountsEnabled)
        name = try container.decodeIfPresent(.name)
        ownerCommission = try container.decodeIfPresent(.ownerCommission)
        providerCommission = try container.decodeIfPresent(.providerCommission)
        referenceDescription = try container.decodeIfPresent(.referenceDescription)
        referenceImage = try container.decodeIfPresent(.referenceImage)
        referenceSizeDescription = try container.decodeIfPresent(.referenceSizeDescription)
        segmentId = try container.decodeIfPresent(.segmentId)
        status = try container.decodeIfPresent(.status)
        txnId = try container.decodeIfPresent(.txnId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(customerCommission, forKey: .customerCommission)
        try container.encodeIfPresent(finalCustomerPaysCommission, forKey: .finalCustomerPaysCommission)
        try container.encodeIfPresent(fixedAmounts, forKey: .fixedAmounts)
        try container.encodeIfPresent(fixedAmountsEnabled, forKey: .fixedAmountsEnabled)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(ownerCommission, forKey: .ownerCommission)
        try container.encodeIfPresent(providerCommission, forKey: .providerCommission)
        try container.encodeIfPresent(referenceDescription, forKey: .referenceDescription)
        try container.encodeIfPresent(referenceImage, forKey: .referenceImage)
        try container.encodeIfPresent(referenceSizeDescription, forKey: .referenceSizeDescription)
        try container.encodeIfPresent(segmentId, forKey: .segmentId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(txnId, forKey: .txnId)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ProductDto else { return false }
      guard self.customerCommission == object.customerCommission else { return false }
      guard self.finalCustomerPaysCommission == object.finalCustomerPaysCommission else { return false }
      guard self.fixedAmounts == object.fixedAmounts else { return false }
      guard self.fixedAmountsEnabled == object.fixedAmountsEnabled else { return false }
      guard self.name == object.name else { return false }
      guard self.ownerCommission == object.ownerCommission else { return false }
      guard self.providerCommission == object.providerCommission else { return false }
      guard self.referenceDescription == object.referenceDescription else { return false }
      guard self.referenceImage == object.referenceImage else { return false }
      guard self.referenceSizeDescription == object.referenceSizeDescription else { return false }
      guard self.segmentId == object.segmentId else { return false }
      guard self.status == object.status else { return false }
      guard self.txnId == object.txnId else { return false }
      return true
    }

    public static func == (lhs: ProductDto, rhs: ProductDto) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
