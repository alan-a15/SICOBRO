//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class ServicePaymentTransaction: APIModel {

    public enum OperationType: String, Codable {
        case sale = "SALE"
        case balanceUp = "BALANCE_UP"
        case balanceDown = "BALANCE_DOWN"
        case balanceTransfer = "BALANCE_TRANSFER"

        public static let cases: [OperationType] = [
          .sale,
          .balanceUp,
          .balanceDown,
          .balanceTransfer,
        ]
    }

    public enum ProductType: String, Codable {
        case tae = "TAE"
        case servicePayment = "SERVICE_PAYMENT"

        public static let cases: [ProductType] = [
          .tae,
          .servicePayment,
        ]
    }

    public enum TxnStatus: String, Codable {
        case created = "CREATED"
        case denied = "DENIED"
        case approved = "APPROVED"
        case voided = "VOIDED"

        public static let cases: [TxnStatus] = [
          .created,
          .denied,
          .approved,
          .voided,
        ]
    }

    public var account: String?

    public var additionalReferences: String?

    public var amount: Int?

    public var amountLabel: String?

    public var approvalCode: String?

    public var authorizerRC: String?

    public var authorizerRM: String?

    public var clientConnectedType: String?

    public var clientSwitchDate: String?

    public var clientVersion: String?

    public var createdAt: DateTime?

    public var createdAtLabel: String?

    public var customerBalanceCharge: Int?

    public var customerCommission: Int?

    public var customerCommissionLabel: String?

    public var customerId: Int?

    public var customerName: String?

    public var deepestResponseCode: String?

    public var deepestResponseMessage: String?

    public var epagoCommissionAmount: Int?

    public var epagoDate: String?

    public var epagoHasBarCode: Bool?

    public var epagoIsVoidable: Bool?

    public var epagoProductTxnId: String?

    public var epagoStatusCode: Int?

    public var epagoTotalAmount: Int?

    public var epagoTransactionId: String?

    public var finalCustomerCommissionCharge: Int?

    public var finalCustomerCommissionChargeLabel: String?

    public var finalCustomerPaysCommission: Bool?

    public var finalCustomerTotalCharge: Int?

    public var finalCustomerTotalChargeLabel: String?

    public var id: Int?

    public var janoTransactionId: String?

    public var mobileSessionId: Int?

    public var operationType: OperationType?

    public var operationTypeLabel: String?

    public var ownerCommission: Int?

    public var ownerCommissionLabel: String?

    public var processingTimeMillis: Int?

    public var productCustomerCommission: String?

    public var productName: String?

    public var productOwnerCommission: String?

    public var productProviderCommission: String?

    public var productTxnId: String?

    public var productType: ProductType?

    public var providerCommission: Int?

    public var providerCommissionLabel: String?

    public var redId: String?

    public var responseCode: String?

    public var responseMessage: String?

    public var responseReferencesJson: String?

    public var retrievalId: String?

    public var serviceProcessingTimeMillis: Int?

    public var sleuthTraceId: String?

    public var storeId: Int?

    public var storeName: String?

    public var storePin: String?

    public var traceUUID: String?

    public var txnDateId: Int?

    public var txnStatus: TxnStatus?

    public var txnStatusLabel: String?

    public var waitingAuthorizationMillis: Int?

    public init(account: String? = nil, additionalReferences: String? = nil, amount: Int? = nil, amountLabel: String? = nil, approvalCode: String? = nil, authorizerRC: String? = nil, authorizerRM: String? = nil, clientConnectedType: String? = nil, clientSwitchDate: String? = nil, clientVersion: String? = nil, createdAt: DateTime? = nil, createdAtLabel: String? = nil, customerBalanceCharge: Int? = nil, customerCommission: Int? = nil, customerCommissionLabel: String? = nil, customerId: Int? = nil, customerName: String? = nil, deepestResponseCode: String? = nil, deepestResponseMessage: String? = nil, epagoCommissionAmount: Int? = nil, epagoDate: String? = nil, epagoHasBarCode: Bool? = nil, epagoIsVoidable: Bool? = nil, epagoProductTxnId: String? = nil, epagoStatusCode: Int? = nil, epagoTotalAmount: Int? = nil, epagoTransactionId: String? = nil, finalCustomerCommissionCharge: Int? = nil, finalCustomerCommissionChargeLabel: String? = nil, finalCustomerPaysCommission: Bool? = nil, finalCustomerTotalCharge: Int? = nil, finalCustomerTotalChargeLabel: String? = nil, id: Int? = nil, janoTransactionId: String? = nil, mobileSessionId: Int? = nil, operationType: OperationType? = nil, operationTypeLabel: String? = nil, ownerCommission: Int? = nil, ownerCommissionLabel: String? = nil, processingTimeMillis: Int? = nil, productCustomerCommission: String? = nil, productName: String? = nil, productOwnerCommission: String? = nil, productProviderCommission: String? = nil, productTxnId: String? = nil, productType: ProductType? = nil, providerCommission: Int? = nil, providerCommissionLabel: String? = nil, redId: String? = nil, responseCode: String? = nil, responseMessage: String? = nil, responseReferencesJson: String? = nil, retrievalId: String? = nil, serviceProcessingTimeMillis: Int? = nil, sleuthTraceId: String? = nil, storeId: Int? = nil, storeName: String? = nil, storePin: String? = nil, traceUUID: String? = nil, txnDateId: Int? = nil, txnStatus: TxnStatus? = nil, txnStatusLabel: String? = nil, waitingAuthorizationMillis: Int? = nil) {
        self.account = account
        self.additionalReferences = additionalReferences
        self.amount = amount
        self.amountLabel = amountLabel
        self.approvalCode = approvalCode
        self.authorizerRC = authorizerRC
        self.authorizerRM = authorizerRM
        self.clientConnectedType = clientConnectedType
        self.clientSwitchDate = clientSwitchDate
        self.clientVersion = clientVersion
        self.createdAt = createdAt
        self.createdAtLabel = createdAtLabel
        self.customerBalanceCharge = customerBalanceCharge
        self.customerCommission = customerCommission
        self.customerCommissionLabel = customerCommissionLabel
        self.customerId = customerId
        self.customerName = customerName
        self.deepestResponseCode = deepestResponseCode
        self.deepestResponseMessage = deepestResponseMessage
        self.epagoCommissionAmount = epagoCommissionAmount
        self.epagoDate = epagoDate
        self.epagoHasBarCode = epagoHasBarCode
        self.epagoIsVoidable = epagoIsVoidable
        self.epagoProductTxnId = epagoProductTxnId
        self.epagoStatusCode = epagoStatusCode
        self.epagoTotalAmount = epagoTotalAmount
        self.epagoTransactionId = epagoTransactionId
        self.finalCustomerCommissionCharge = finalCustomerCommissionCharge
        self.finalCustomerCommissionChargeLabel = finalCustomerCommissionChargeLabel
        self.finalCustomerPaysCommission = finalCustomerPaysCommission
        self.finalCustomerTotalCharge = finalCustomerTotalCharge
        self.finalCustomerTotalChargeLabel = finalCustomerTotalChargeLabel
        self.id = id
        self.janoTransactionId = janoTransactionId
        self.mobileSessionId = mobileSessionId
        self.operationType = operationType
        self.operationTypeLabel = operationTypeLabel
        self.ownerCommission = ownerCommission
        self.ownerCommissionLabel = ownerCommissionLabel
        self.processingTimeMillis = processingTimeMillis
        self.productCustomerCommission = productCustomerCommission
        self.productName = productName
        self.productOwnerCommission = productOwnerCommission
        self.productProviderCommission = productProviderCommission
        self.productTxnId = productTxnId
        self.productType = productType
        self.providerCommission = providerCommission
        self.providerCommissionLabel = providerCommissionLabel
        self.redId = redId
        self.responseCode = responseCode
        self.responseMessage = responseMessage
        self.responseReferencesJson = responseReferencesJson
        self.retrievalId = retrievalId
        self.serviceProcessingTimeMillis = serviceProcessingTimeMillis
        self.sleuthTraceId = sleuthTraceId
        self.storeId = storeId
        self.storeName = storeName
        self.storePin = storePin
        self.traceUUID = traceUUID
        self.txnDateId = txnDateId
        self.txnStatus = txnStatus
        self.txnStatusLabel = txnStatusLabel
        self.waitingAuthorizationMillis = waitingAuthorizationMillis
    }

    private enum CodingKeys: String, CodingKey {
        case account
        case additionalReferences
        case amount
        case amountLabel
        case approvalCode
        case authorizerRC
        case authorizerRM
        case clientConnectedType
        case clientSwitchDate
        case clientVersion
        case createdAt
        case createdAtLabel
        case customerBalanceCharge
        case customerCommission
        case customerCommissionLabel
        case customerId
        case customerName
        case deepestResponseCode
        case deepestResponseMessage
        case epagoCommissionAmount
        case epagoDate
        case epagoHasBarCode
        case epagoIsVoidable
        case epagoProductTxnId
        case epagoStatusCode
        case epagoTotalAmount
        case epagoTransactionId
        case finalCustomerCommissionCharge
        case finalCustomerCommissionChargeLabel
        case finalCustomerPaysCommission
        case finalCustomerTotalCharge
        case finalCustomerTotalChargeLabel
        case id
        case janoTransactionId
        case mobileSessionId
        case operationType
        case operationTypeLabel
        case ownerCommission
        case ownerCommissionLabel
        case processingTimeMillis
        case productCustomerCommission
        case productName
        case productOwnerCommission
        case productProviderCommission
        case productTxnId
        case productType
        case providerCommission
        case providerCommissionLabel
        case redId
        case responseCode
        case responseMessage
        case responseReferencesJson
        case retrievalId
        case serviceProcessingTimeMillis
        case sleuthTraceId
        case storeId
        case storeName
        case storePin
        case traceUUID
        case txnDateId
        case txnStatus
        case txnStatusLabel
        case waitingAuthorizationMillis
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        account = try container.decodeIfPresent(.account)
        additionalReferences = try container.decodeIfPresent(.additionalReferences)
        amount = try container.decodeIfPresent(.amount)
        amountLabel = try container.decodeIfPresent(.amountLabel)
        approvalCode = try container.decodeIfPresent(.approvalCode)
        authorizerRC = try container.decodeIfPresent(.authorizerRC)
        authorizerRM = try container.decodeIfPresent(.authorizerRM)
        clientConnectedType = try container.decodeIfPresent(.clientConnectedType)
        clientSwitchDate = try container.decodeIfPresent(.clientSwitchDate)
        clientVersion = try container.decodeIfPresent(.clientVersion)
        createdAt = try container.decodeIfPresent(.createdAt)
        createdAtLabel = try container.decodeIfPresent(.createdAtLabel)
        customerBalanceCharge = try container.decodeIfPresent(.customerBalanceCharge)
        customerCommission = try container.decodeIfPresent(.customerCommission)
        customerCommissionLabel = try container.decodeIfPresent(.customerCommissionLabel)
        customerId = try container.decodeIfPresent(.customerId)
        customerName = try container.decodeIfPresent(.customerName)
        deepestResponseCode = try container.decodeIfPresent(.deepestResponseCode)
        deepestResponseMessage = try container.decodeIfPresent(.deepestResponseMessage)
        epagoCommissionAmount = try container.decodeIfPresent(.epagoCommissionAmount)
        epagoDate = try container.decodeIfPresent(.epagoDate)
        epagoHasBarCode = try container.decodeIfPresent(.epagoHasBarCode)
        epagoIsVoidable = try container.decodeIfPresent(.epagoIsVoidable)
        epagoProductTxnId = try container.decodeIfPresent(.epagoProductTxnId)
        epagoStatusCode = try container.decodeIfPresent(.epagoStatusCode)
        epagoTotalAmount = try container.decodeIfPresent(.epagoTotalAmount)
        epagoTransactionId = try container.decodeIfPresent(.epagoTransactionId)
        finalCustomerCommissionCharge = try container.decodeIfPresent(.finalCustomerCommissionCharge)
        finalCustomerCommissionChargeLabel = try container.decodeIfPresent(.finalCustomerCommissionChargeLabel)
        finalCustomerPaysCommission = try container.decodeIfPresent(.finalCustomerPaysCommission)
        finalCustomerTotalCharge = try container.decodeIfPresent(.finalCustomerTotalCharge)
        finalCustomerTotalChargeLabel = try container.decodeIfPresent(.finalCustomerTotalChargeLabel)
        id = try container.decodeIfPresent(.id)
        janoTransactionId = try container.decodeIfPresent(.janoTransactionId)
        mobileSessionId = try container.decodeIfPresent(.mobileSessionId)
        operationType = try container.decodeIfPresent(.operationType)
        operationTypeLabel = try container.decodeIfPresent(.operationTypeLabel)
        ownerCommission = try container.decodeIfPresent(.ownerCommission)
        ownerCommissionLabel = try container.decodeIfPresent(.ownerCommissionLabel)
        processingTimeMillis = try container.decodeIfPresent(.processingTimeMillis)
        productCustomerCommission = try container.decodeIfPresent(.productCustomerCommission)
        productName = try container.decodeIfPresent(.productName)
        productOwnerCommission = try container.decodeIfPresent(.productOwnerCommission)
        productProviderCommission = try container.decodeIfPresent(.productProviderCommission)
        productTxnId = try container.decodeIfPresent(.productTxnId)
        productType = try container.decodeIfPresent(.productType)
        providerCommission = try container.decodeIfPresent(.providerCommission)
        providerCommissionLabel = try container.decodeIfPresent(.providerCommissionLabel)
        redId = try container.decodeIfPresent(.redId)
        responseCode = try container.decodeIfPresent(.responseCode)
        responseMessage = try container.decodeIfPresent(.responseMessage)
        responseReferencesJson = try container.decodeIfPresent(.responseReferencesJson)
        retrievalId = try container.decodeIfPresent(.retrievalId)
        serviceProcessingTimeMillis = try container.decodeIfPresent(.serviceProcessingTimeMillis)
        sleuthTraceId = try container.decodeIfPresent(.sleuthTraceId)
        storeId = try container.decodeIfPresent(.storeId)
        storeName = try container.decodeIfPresent(.storeName)
        storePin = try container.decodeIfPresent(.storePin)
        traceUUID = try container.decodeIfPresent(.traceUUID)
        txnDateId = try container.decodeIfPresent(.txnDateId)
        txnStatus = try container.decodeIfPresent(.txnStatus)
        txnStatusLabel = try container.decodeIfPresent(.txnStatusLabel)
        waitingAuthorizationMillis = try container.decodeIfPresent(.waitingAuthorizationMillis)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(account, forKey: .account)
        try container.encodeIfPresent(additionalReferences, forKey: .additionalReferences)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountLabel, forKey: .amountLabel)
        try container.encodeIfPresent(approvalCode, forKey: .approvalCode)
        try container.encodeIfPresent(authorizerRC, forKey: .authorizerRC)
        try container.encodeIfPresent(authorizerRM, forKey: .authorizerRM)
        try container.encodeIfPresent(clientConnectedType, forKey: .clientConnectedType)
        try container.encodeIfPresent(clientSwitchDate, forKey: .clientSwitchDate)
        try container.encodeIfPresent(clientVersion, forKey: .clientVersion)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(createdAtLabel, forKey: .createdAtLabel)
        try container.encodeIfPresent(customerBalanceCharge, forKey: .customerBalanceCharge)
        try container.encodeIfPresent(customerCommission, forKey: .customerCommission)
        try container.encodeIfPresent(customerCommissionLabel, forKey: .customerCommissionLabel)
        try container.encodeIfPresent(customerId, forKey: .customerId)
        try container.encodeIfPresent(customerName, forKey: .customerName)
        try container.encodeIfPresent(deepestResponseCode, forKey: .deepestResponseCode)
        try container.encodeIfPresent(deepestResponseMessage, forKey: .deepestResponseMessage)
        try container.encodeIfPresent(epagoCommissionAmount, forKey: .epagoCommissionAmount)
        try container.encodeIfPresent(epagoDate, forKey: .epagoDate)
        try container.encodeIfPresent(epagoHasBarCode, forKey: .epagoHasBarCode)
        try container.encodeIfPresent(epagoIsVoidable, forKey: .epagoIsVoidable)
        try container.encodeIfPresent(epagoProductTxnId, forKey: .epagoProductTxnId)
        try container.encodeIfPresent(epagoStatusCode, forKey: .epagoStatusCode)
        try container.encodeIfPresent(epagoTotalAmount, forKey: .epagoTotalAmount)
        try container.encodeIfPresent(epagoTransactionId, forKey: .epagoTransactionId)
        try container.encodeIfPresent(finalCustomerCommissionCharge, forKey: .finalCustomerCommissionCharge)
        try container.encodeIfPresent(finalCustomerCommissionChargeLabel, forKey: .finalCustomerCommissionChargeLabel)
        try container.encodeIfPresent(finalCustomerPaysCommission, forKey: .finalCustomerPaysCommission)
        try container.encodeIfPresent(finalCustomerTotalCharge, forKey: .finalCustomerTotalCharge)
        try container.encodeIfPresent(finalCustomerTotalChargeLabel, forKey: .finalCustomerTotalChargeLabel)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(janoTransactionId, forKey: .janoTransactionId)
        try container.encodeIfPresent(mobileSessionId, forKey: .mobileSessionId)
        try container.encodeIfPresent(operationType, forKey: .operationType)
        try container.encodeIfPresent(operationTypeLabel, forKey: .operationTypeLabel)
        try container.encodeIfPresent(ownerCommission, forKey: .ownerCommission)
        try container.encodeIfPresent(ownerCommissionLabel, forKey: .ownerCommissionLabel)
        try container.encodeIfPresent(processingTimeMillis, forKey: .processingTimeMillis)
        try container.encodeIfPresent(productCustomerCommission, forKey: .productCustomerCommission)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(productOwnerCommission, forKey: .productOwnerCommission)
        try container.encodeIfPresent(productProviderCommission, forKey: .productProviderCommission)
        try container.encodeIfPresent(productTxnId, forKey: .productTxnId)
        try container.encodeIfPresent(productType, forKey: .productType)
        try container.encodeIfPresent(providerCommission, forKey: .providerCommission)
        try container.encodeIfPresent(providerCommissionLabel, forKey: .providerCommissionLabel)
        try container.encodeIfPresent(redId, forKey: .redId)
        try container.encodeIfPresent(responseCode, forKey: .responseCode)
        try container.encodeIfPresent(responseMessage, forKey: .responseMessage)
        try container.encodeIfPresent(responseReferencesJson, forKey: .responseReferencesJson)
        try container.encodeIfPresent(retrievalId, forKey: .retrievalId)
        try container.encodeIfPresent(serviceProcessingTimeMillis, forKey: .serviceProcessingTimeMillis)
        try container.encodeIfPresent(sleuthTraceId, forKey: .sleuthTraceId)
        try container.encodeIfPresent(storeId, forKey: .storeId)
        try container.encodeIfPresent(storeName, forKey: .storeName)
        try container.encodeIfPresent(storePin, forKey: .storePin)
        try container.encodeIfPresent(traceUUID, forKey: .traceUUID)
        try container.encodeIfPresent(txnDateId, forKey: .txnDateId)
        try container.encodeIfPresent(txnStatus, forKey: .txnStatus)
        try container.encodeIfPresent(txnStatusLabel, forKey: .txnStatusLabel)
        try container.encodeIfPresent(waitingAuthorizationMillis, forKey: .waitingAuthorizationMillis)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? ServicePaymentTransaction else { return false }
      guard self.account == object.account else { return false }
      guard self.additionalReferences == object.additionalReferences else { return false }
      guard self.amount == object.amount else { return false }
      guard self.amountLabel == object.amountLabel else { return false }
      guard self.approvalCode == object.approvalCode else { return false }
      guard self.authorizerRC == object.authorizerRC else { return false }
      guard self.authorizerRM == object.authorizerRM else { return false }
      guard self.clientConnectedType == object.clientConnectedType else { return false }
      guard self.clientSwitchDate == object.clientSwitchDate else { return false }
      guard self.clientVersion == object.clientVersion else { return false }
      guard self.createdAt == object.createdAt else { return false }
      guard self.createdAtLabel == object.createdAtLabel else { return false }
      guard self.customerBalanceCharge == object.customerBalanceCharge else { return false }
      guard self.customerCommission == object.customerCommission else { return false }
      guard self.customerCommissionLabel == object.customerCommissionLabel else { return false }
      guard self.customerId == object.customerId else { return false }
      guard self.customerName == object.customerName else { return false }
      guard self.deepestResponseCode == object.deepestResponseCode else { return false }
      guard self.deepestResponseMessage == object.deepestResponseMessage else { return false }
      guard self.epagoCommissionAmount == object.epagoCommissionAmount else { return false }
      guard self.epagoDate == object.epagoDate else { return false }
      guard self.epagoHasBarCode == object.epagoHasBarCode else { return false }
      guard self.epagoIsVoidable == object.epagoIsVoidable else { return false }
      guard self.epagoProductTxnId == object.epagoProductTxnId else { return false }
      guard self.epagoStatusCode == object.epagoStatusCode else { return false }
      guard self.epagoTotalAmount == object.epagoTotalAmount else { return false }
      guard self.epagoTransactionId == object.epagoTransactionId else { return false }
      guard self.finalCustomerCommissionCharge == object.finalCustomerCommissionCharge else { return false }
      guard self.finalCustomerCommissionChargeLabel == object.finalCustomerCommissionChargeLabel else { return false }
      guard self.finalCustomerPaysCommission == object.finalCustomerPaysCommission else { return false }
      guard self.finalCustomerTotalCharge == object.finalCustomerTotalCharge else { return false }
      guard self.finalCustomerTotalChargeLabel == object.finalCustomerTotalChargeLabel else { return false }
      guard self.id == object.id else { return false }
      guard self.janoTransactionId == object.janoTransactionId else { return false }
      guard self.mobileSessionId == object.mobileSessionId else { return false }
      guard self.operationType == object.operationType else { return false }
      guard self.operationTypeLabel == object.operationTypeLabel else { return false }
      guard self.ownerCommission == object.ownerCommission else { return false }
      guard self.ownerCommissionLabel == object.ownerCommissionLabel else { return false }
      guard self.processingTimeMillis == object.processingTimeMillis else { return false }
      guard self.productCustomerCommission == object.productCustomerCommission else { return false }
      guard self.productName == object.productName else { return false }
      guard self.productOwnerCommission == object.productOwnerCommission else { return false }
      guard self.productProviderCommission == object.productProviderCommission else { return false }
      guard self.productTxnId == object.productTxnId else { return false }
      guard self.productType == object.productType else { return false }
      guard self.providerCommission == object.providerCommission else { return false }
      guard self.providerCommissionLabel == object.providerCommissionLabel else { return false }
      guard self.redId == object.redId else { return false }
      guard self.responseCode == object.responseCode else { return false }
      guard self.responseMessage == object.responseMessage else { return false }
      guard self.responseReferencesJson == object.responseReferencesJson else { return false }
      guard self.retrievalId == object.retrievalId else { return false }
      guard self.serviceProcessingTimeMillis == object.serviceProcessingTimeMillis else { return false }
      guard self.sleuthTraceId == object.sleuthTraceId else { return false }
      guard self.storeId == object.storeId else { return false }
      guard self.storeName == object.storeName else { return false }
      guard self.storePin == object.storePin else { return false }
      guard self.traceUUID == object.traceUUID else { return false }
      guard self.txnDateId == object.txnDateId else { return false }
      guard self.txnStatus == object.txnStatus else { return false }
      guard self.txnStatusLabel == object.txnStatusLabel else { return false }
      guard self.waitingAuthorizationMillis == object.waitingAuthorizationMillis else { return false }
      return true
    }

    public static func == (lhs: ServicePaymentTransaction, rhs: ServicePaymentTransaction) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
