//
// Generated by SwagGen
// https://github.com/yonaskolb/SwagGen
//

import Foundation

public class TransactionResponse: APIModel {

    public var additionalReferences: String?

    public var amount: String?

    public var amountLabel: String?

    public var approvalCode: String?

    public var balanceDecrease: String?

    public var balanceDecreaseLabel: String?

    public var commission: String?

    public var commissionLabel: String?

    public var creationDateLabel: String?

    public var janoRetrievalId: String?

    public var newBalance: String?

    public var newBalanceLabel: String?

    public var paymentReference: String?

    public var productName: String?

    public var productTxnId: String?

    public var totalAmount: String?

    public var totalAmountLabel: String?

    public init(additionalReferences: String? = nil, amount: String? = nil, amountLabel: String? = nil, approvalCode: String? = nil, balanceDecrease: String? = nil, balanceDecreaseLabel: String? = nil, commission: String? = nil, commissionLabel: String? = nil, creationDateLabel: String? = nil, janoRetrievalId: String? = nil, newBalance: String? = nil, newBalanceLabel: String? = nil, paymentReference: String? = nil, productName: String? = nil, productTxnId: String? = nil, totalAmount: String? = nil, totalAmountLabel: String? = nil) {
        self.additionalReferences = additionalReferences
        self.amount = amount
        self.amountLabel = amountLabel
        self.approvalCode = approvalCode
        self.balanceDecrease = balanceDecrease
        self.balanceDecreaseLabel = balanceDecreaseLabel
        self.commission = commission
        self.commissionLabel = commissionLabel
        self.creationDateLabel = creationDateLabel
        self.janoRetrievalId = janoRetrievalId
        self.newBalance = newBalance
        self.newBalanceLabel = newBalanceLabel
        self.paymentReference = paymentReference
        self.productName = productName
        self.productTxnId = productTxnId
        self.totalAmount = totalAmount
        self.totalAmountLabel = totalAmountLabel
    }

    private enum CodingKeys: String, CodingKey {
        case additionalReferences
        case amount
        case amountLabel
        case approvalCode
        case balanceDecrease
        case balanceDecreaseLabel
        case commission
        case commissionLabel
        case creationDateLabel
        case janoRetrievalId
        case newBalance
        case newBalanceLabel
        case paymentReference
        case productName
        case productTxnId
        case totalAmount
        case totalAmountLabel
    }

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        additionalReferences = try container.decodeIfPresent(.additionalReferences)
        amount = try container.decodeIfPresent(.amount)
        amountLabel = try container.decodeIfPresent(.amountLabel)
        approvalCode = try container.decodeIfPresent(.approvalCode)
        balanceDecrease = try container.decodeIfPresent(.balanceDecrease)
        balanceDecreaseLabel = try container.decodeIfPresent(.balanceDecreaseLabel)
        commission = try container.decodeIfPresent(.commission)
        commissionLabel = try container.decodeIfPresent(.commissionLabel)
        creationDateLabel = try container.decodeIfPresent(.creationDateLabel)
        janoRetrievalId = try container.decodeIfPresent(.janoRetrievalId)
        newBalance = try container.decodeIfPresent(.newBalance)
        newBalanceLabel = try container.decodeIfPresent(.newBalanceLabel)
        paymentReference = try container.decodeIfPresent(.paymentReference)
        productName = try container.decodeIfPresent(.productName)
        productTxnId = try container.decodeIfPresent(.productTxnId)
        totalAmount = try container.decodeIfPresent(.totalAmount)
        totalAmountLabel = try container.decodeIfPresent(.totalAmountLabel)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encodeIfPresent(additionalReferences, forKey: .additionalReferences)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(amountLabel, forKey: .amountLabel)
        try container.encodeIfPresent(approvalCode, forKey: .approvalCode)
        try container.encodeIfPresent(balanceDecrease, forKey: .balanceDecrease)
        try container.encodeIfPresent(balanceDecreaseLabel, forKey: .balanceDecreaseLabel)
        try container.encodeIfPresent(commission, forKey: .commission)
        try container.encodeIfPresent(commissionLabel, forKey: .commissionLabel)
        try container.encodeIfPresent(creationDateLabel, forKey: .creationDateLabel)
        try container.encodeIfPresent(janoRetrievalId, forKey: .janoRetrievalId)
        try container.encodeIfPresent(newBalance, forKey: .newBalance)
        try container.encodeIfPresent(newBalanceLabel, forKey: .newBalanceLabel)
        try container.encodeIfPresent(paymentReference, forKey: .paymentReference)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(productTxnId, forKey: .productTxnId)
        try container.encodeIfPresent(totalAmount, forKey: .totalAmount)
        try container.encodeIfPresent(totalAmountLabel, forKey: .totalAmountLabel)
    }

    public func isEqual(to object: Any?) -> Bool {
      guard let object = object as? TransactionResponse else { return false }
      guard self.additionalReferences == object.additionalReferences else { return false }
      guard self.amount == object.amount else { return false }
      guard self.amountLabel == object.amountLabel else { return false }
      guard self.approvalCode == object.approvalCode else { return false }
      guard self.balanceDecrease == object.balanceDecrease else { return false }
      guard self.balanceDecreaseLabel == object.balanceDecreaseLabel else { return false }
      guard self.commission == object.commission else { return false }
      guard self.commissionLabel == object.commissionLabel else { return false }
      guard self.creationDateLabel == object.creationDateLabel else { return false }
      guard self.janoRetrievalId == object.janoRetrievalId else { return false }
      guard self.newBalance == object.newBalance else { return false }
      guard self.newBalanceLabel == object.newBalanceLabel else { return false }
      guard self.paymentReference == object.paymentReference else { return false }
      guard self.productName == object.productName else { return false }
      guard self.productTxnId == object.productTxnId else { return false }
      guard self.totalAmount == object.totalAmount else { return false }
      guard self.totalAmountLabel == object.totalAmountLabel else { return false }
      return true
    }

    public static func == (lhs: TransactionResponse, rhs: TransactionResponse) -> Bool {
        return lhs.isEqual(to: rhs)
    }
}
